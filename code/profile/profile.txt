Fri 15 Mar 2024 01:24:50 PM EDT
 > params.get_n_all: N = 10
 > system.run_n: N = 10
        0         1         2         3         4         5         6         7         8         9 
Wrote profile results to test.py.lprof
Timer unit: 1 s

Total time: 2.00418 s
File: /home/jesse/sci/proj/esw/code/model/foi.py
Function: get_beta at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def get_beta(P,t):
    17                                             # beta: probability of transmission per sex act
    18                                             # beta.shape = (a:2, p:4, s:2, i:4, s':2, i':4, h':6, c':5)
    19      9000          0.9      0.0     45.5    RbA_condom = linear_comb(P['PF_condom_t'](t) * P['RPF_condom_a'], P['Rbeta_condom'], 1)
    20      9000          0.3      0.0     15.9    RbA_circum = linear_comb(P['PF_circum_t'](t), P['Rbeta_circum'], 1)
    21      9000          0.3      0.0     12.8    P_gud_t = P['P_gud'] * P['RP_gud_t'](t) # GUD = genital ulcer diseases
    22      9000          0.1      0.0      2.7    Rbeta_gud_sus = linear_comb(P_gud_t,1+P['aRbeta_gud_sus'],1).reshape([1,1,2,4,1,1,1,1]) # self
    23      9000          0.0      0.0      2.1    Rbeta_gud_inf = linear_comb(P_gud_t,1+P['aRbeta_gud_inf'],1).reshape([1,1,1,1,2,4,1,1]) # other
    24                                             # product of base prob & relative factors, force beta <= 0.5
    25      9000          0.4      0.0     21.2    return np.minimum(.5, P['beta_a'] * Rbeta_gud_sus * Rbeta_gud_inf * RbA_condom * RbA_circum)

Total time: 2.85427 s
File: /home/jesse/sci/proj/esw/code/model/foi.py
Function: get_mix at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @deco.nowarn
    28                                           @profile
    29                                           def get_mix(XC,P):
    30                                             # mix: population-scale mixing (total partners), mix.shape = (p:4, s:2, i:4, s':2, i':4)
    31                                             # XC: total partners, XC.shape = (p:4, s:2, i:4)
    32                                             # M0: random mixing, M0.shape = (p:4, i:4 {women}, i':4 {men})
    33      9000          0.3      0.0     10.3    M0 = XC[:,0,:,_] * XC[:,1,_,:] / XC.sum(axis=2).mean(axis=1)[:,_,_] + tol/10
    34      9000          0.0      0.0      1.1    m1 = M0.sum(axis=1) # total for men
    35      9000          0.0      0.0      0.7    m2 = M0.sum(axis=2) # total for women
    36                                             # print(m1 / XC[:,1,:]) # DEBUG == 1, unless XC unbalanced
    37                                             # print(m2 / XC[:,0,:]) # DEBUG == 1, unless XC unbalanced
    38      9000          0.0      0.0      0.6    M = M0 * np.exp(P['pref_pii']) # apply mixing log-odds
    39                                             # iterative proportional fitting
    40    175004          0.1      0.0      2.1    for k in range(100):
    41    174104          0.5      0.0     17.4      r1 = m1 / M.sum(axis=1)
    42    174104          0.3      0.0     10.9      M *= r1[:,_,:]
    43    174104          0.5      0.0     16.1      r2 = m2 / M.sum(axis=2)
    44    174104          0.3      0.0     10.3      M *= r2[:,:,_]
    45    174104          0.8      0.0     27.9      if (abs(r1-1) < tol).all() and (abs(r2-1) < tol).all():
    46      8100          0.0      0.0      0.1        break # close enough, usually k < 20
    47      9000          0.0      0.0      1.1    M[abs(M)<tol] = 0 # fix rounding errors
    48      9000          0.0      0.0      0.6    P['mix'][:,0,:,1,:] = M
    49      9000          0.0      0.0      0.6    P['mix'][:,1,:,0,:] = M.swapaxes(1,2)
    50      9000          0.0      0.0      0.1    return P['mix']

Total time: 7.18688 s
File: /home/jesse/sci/proj/esw/code/model/foi.py
Function: get_apply_inc at line 52

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    52                                           @deco.nowarn
    53                                           @profile
    54                                           def get_apply_inc(dX,X,t,P):
    55                                             # inc.shape = (p:4, s:2, i:4, s':2, i':4)
    56                                             # > if foi_mode in ['base','lin','rd','ry']: return *absolute* infections (not per susceptible)
    57                                             # > if foi_mode in ['py']: return *probability* of infection (aggr must be deferred)
    58                                             # C_psik = partner numbers (K) or rates of ptr change (Q); A = sex acts per partnership
    59                                             # C_psik.shape = (p:4, s:2, i:4, k:5)
    60      9000          0.0      0.0      0.1    if P['foi_mode'] in ['base']:
    61      9000          0.0      0.0      0.5      C_psik = P['K_psi'] - P['aK_pk'] # K (ptr count), EPA adjusted
    62      9000          0.4      0.0      5.8      fix_XK(X,P) # see function comments
    63                                             elif P['foi_mode'] in ['lin']:
    64                                               C_psik = P['K_psi'] # K (ptr count), no adjustment
    65                                             elif P['foi_mode'] in ['rd']:
    66                                               C_psik = P['K_psi'] / P['dur_p'][:,_,_,_] # Q (ptr rate)
    67                                               A_ap = P['F_ap'] * P['dur_p'] # A (sex acts, full duration)
    68                                             elif P['foi_mode'] in ['ry','py']:
    69                                               C_psik = P['K_psi'] / P['dur_p_1'][:,_,_,_] # Q_1 (ptr rate >= 1)
    70                                               A_ap = P['F_ap'] * P['dur_p_1'] # A (sex acts, duration <= 1 year)
    71                                             # setup mixing & compute prevalence
    72      9000          0.1      0.0      2.0    XC_psihc = (X[_,:,:,:,:,:] * C_psik[:,:,:,:,_,_]).sum(axis=3) # total effective partners
    73      9000          0.0      0.0      0.6    XC_psihc[XC_psihc<0] = 0 # fix rounding errors
    74      9000          0.0      0.0      0.5    XC_psi = XC_psihc.sum(axis=(3,4)) # shape = (p:4, s:2, i:4)
    75                                             # Phc = % in strata (h,c) among (p,s,i); unless foi_mode = 'base', Phc_XC_psi = Phc_X_psi
    76      9000          0.0      0.0      0.7    Phc_XC_psi = XC_psihc / (XC_psi[:,:,:,_,_] + tol/10) # shape = (p:4, s:2, i:4, h:6, c:5)
    77                                             # compute population-scale mixing
    78      9000          3.3      0.0     45.8    mix = get_mix(XC_psi,P) * P['mix_mask'] # shape = (p:4, s:2, i:4, s':2, i':4)
    79                                             # compute per-act probability
    80      9000          2.1      0.0     28.6    beta = get_beta(P,t) # shape = (a:2, p:4, s:2, i:4, s':2, i':4, h':6, c':5)
    81                                             # compute & apply force of infection
    82      9000          0.0      0.0      0.1    if P['foi_mode'] in ['base']:
    83                                               # inc = {# ptrs} * {% sus} * {% inf} * {beta per-act} * {act freq}
    84      9000          0.2      0.0      2.4      Fbeta = (beta * P['F_ap'][:,:,_,_,_,_,_,_]).sum(axis=0) # sum sex act types (a:2)
    85                                               # inc.shape = (p:4, s:2, i:4, s':2, i':4, h':6, c':5)
    86      9000          0.2      0.0      2.3      inc = mix[:,:,:,:,:,_,_] * Phc_XC_psi[:,:,:,0,0,_,_,_,_] * Fbeta * Phc_XC_psi[:,_,_,:,:,:,:]
    87      9000          0.1      0.0      0.7      dXi = inc.sum(axis=(3,4,5,6)) # acquisition: (p:4, s:2, i:4)
    88      9000          0.1      0.0      0.8      dX[:,:,0 ,0,0] -= dXi.sum(axis=0)
    89      9000          0.2      0.0      2.3      dX[:,:,1:,1,0] += np.moveaxis(dXi,0,2)
    90      9000          0.1      0.0      0.8      dXi = inc.sum(axis=(1,2)) # transmission: (p:4, s':2, i':4, h':6, c':5)
    91      9000          0.1      0.0      0.9      dX[:,:,0 ,:,:] -= dXi.sum(axis=0)
    92      9000          0.1      0.0      2.0      dX[:,:,1:,:,:] += np.moveaxis(dXi,0,2)
    93      9000          0.1      0.0      0.7      dXi = X[:,:,1:,:,:] / P['dur_p'][_,_,:,_,_] # new ptrs: (s:2, i:4, k:4, h:6, c:5)
    94      9000          0.0      0.0      0.5      dX[:,:,1:,:,:] -= dXi
    95      9000          0.1      0.0      0.9      dX[:,:,0 ,:,:] += dXi.sum(axis=2)
    96      9000          0.1      0.0      1.2      return inc.sum(axis=(5,6)) # done
    97                                             elif P['foi_mode'] in ['lin']:
    98                                               # inc = {# ptrs} * {% sus} * {% inf} * {beta per-act} * {act freq}
    99                                               Fbeta = (beta * P['F_ap'][:,:,_,_,_,_,_,_]).sum(axis=0) # sum acts
   100                                               inc = mix * Phc_XC_psi[:,:,:,0,0,_,_] * (Fbeta * Phc_XC_psi[:,_,_,:,:,:,:]).sum(axis=(5,6))
   101                                               dXi = aggr_inc(inc,P['foi_mode'],axis=(0,3,4)) # sum across ptrs
   102                                             elif P['foi_mode'] in ['rd','ry']:
   103                                               # inc = {# ptrs} * {% sus} * {% inf} * (1 - (1 - {beta per-act}) ^ {acts per-ptr})
   104                                               B_p = 1 - ((1 - beta) ** A_ap[:,:,_,_,_,_,_,_]).prod(axis=0) # prod acts
   105                                               inc = mix * Phc_XC_psi[:,:,:,0,0,_,_] * (B_p * Phc_XC_psi[:,_,_,:,:,:,:]).sum(axis=(5,6))
   106                                               dXi = aggr_inc(inc,P['foi_mode'],axis=(0,3,4)) # sum across ptrs
   107                                             elif P['foi_mode'] in ['py']:
   108                                               # B = (1 - (1 - {beta per-act}) ^ {acts per-ptr})
   109                                               # inc = {% sus} * (1 - (1 - {B} * {% inf}) ^ {# ptrs})
   110                                               B_p = 1 - ((1 - beta) ** A_ap[:,:,_,_,_,_,_,_]).prod(axis=0) # prod acts
   111                                               mix_pp = mix[:,:,:,:,:,_,_] / X.sum(axis=(2,3,4))[_,:,:,_,_,_,_]
   112                                               inc = 1 - ((1 - B_p * Phc_XC_psi[:,_,_,:,:,:,:]) ** mix_pp).prod(axis=(5,6))
   113                                               dXi = aggr_inc(inc,P['foi_mode'],axis=(0,3,4),Xsus=X[:,:,0,0,0]) # prod across ptrs
   114                                             # all non-base cases
   115                                             dX[:,:,0,0,0] -= dXi # sus
   116                                             dX[:,:,0,1,0] += dXi # inf: acute & undx
   117                                             return inc

Total time: 0 s
File: /home/jesse/sci/proj/esw/code/model/foi.py
Function: aggr_inc at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                           @profile
   120                                           def aggr_inc(inc,foi_mode,axis,Xsus=None,Xinf=None,keepdims=False):
   121                                             # returns absolute infections after appropriately aggregating "inc"
   122                                             # Xsus only needed if 'foi_mode' in ['py']
   123                                             if foi_mode in ['base','lin','rd','ry']:
   124                                               return inc.sum(axis=axis,keepdims=keepdims)
   125                                             if foi_mode in ['py']:
   126                                               return (1 - (1 - inc).prod(axis=axis,keepdims=keepdims)) * Xsus

Total time: 0.379398 s
File: /home/jesse/sci/proj/esw/code/model/foi.py
Function: fix_XK at line 128

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   128                                           @profile
   129                                           def fix_XK(X,P):
   130                                             # we cannot remove more partnerships than we have: X[:,:,1:] <= XKm
   131                                             # if this happens (due to turnover) then move the extra X[:,:,1:] to X[:,:,0]
   132      9000          0.2      0.0     55.5    XKm = X.sum(axis=2,keepdims=True) * np.moveaxis(P['K_psi'],0,2)[...,_]
   133      9000          0.1      0.0     16.6    XKe = np.maximum(0, X[:,:,1:] - XKm)
   134      9000          0.0      0.0     10.6    X[:,:,1:] -= XKe
   135      9000          0.1      0.0     17.3    X[:,:,0 ] += XKe.sum(axis=2)

Total time: 14.2337 s
File: /home/jesse/sci/proj/esw/code/model/system.py
Function: solve at line 43

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                           @profile
    44                                           def solve(P,t):
    45                                             # solve the model for param set P & time vector t
    46        10          0.0      0.0      0.1    X   = get_X(P['X0'],t)               # (t:*, s:2, i:4, k:5, h:6, c:5)
    47        10          0.0      0.0      0.0    inc = get_X(np.zeros([4,2,4,2,4]),t) # (t:*, p:4, s:2, i:4, s':2, i':4)
    48        10          0.0      0.0      0.0    b_hiv,b_tpaf = True,True # toggles so we only introduce HIV & start TPAF once
    49      9010          0.0      0.0      0.0    for i in range(1,t.size):
    50                                               # Ri = rk4step(X[i-1],t[i-1],(t[i]-t[i-1]),get_dX,P=P)
    51      9000         13.9      0.0     97.7      Ri = get_dX(X[i-1],t[i-1],P) # DEBUG: Euler
    52      9000          0.1      0.0      0.4      X[i] = X[i-1] + (t[i] - t[i-1]) * Ri['dX'] # X(t) = X(t-dt) + dt * dX/dt(t-dt)
    53      9000          0.0      0.0      0.1      inc[i] = Ri['inc']
    54      9000          0.0      0.0      0.0      if b_hiv and t[i] >= P['t0_hiv']: # introduce HIV
    55        10          0.0      0.0      0.0        b_hiv = False
    56        10          0.0      0.0      0.0        X[i,:,:,0,:,0] = X[i,:,:,0,0,0,_] * P['PX_h_hiv'][_,_,:]
    57      9000          0.0      0.0      0.1      if b_tpaf and t[i] >= P['t0_tpaf']: # start accumulating TPAF
    58                                                 b_tpaf = False
    59                                                 P['mix_mask'] = P['mix_mask_tpaf']
    60      9000          0.2      0.0      1.6      if np.any(X[i].sum(axis=2) < 0) or np.any(inc[i] < 0): # abort / fail
    61                                                 return False
    62        10          0.0      0.0      0.0    return {
    63        10          0.0      0.0      0.0      'P': P,     # param set
    64        10          0.0      0.0      0.0      't': t,     # time vector
    65        10          0.0      0.0      0.0      'Xk': X,    # population-time array (keep k dim for now)
    66        10          0.0      0.0      0.0      'inc': inc, # incidence-time array
    67                                             }

Total time: 13.759 s
File: /home/jesse/sci/proj/esw/code/model/system.py
Function: get_dX at line 69

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    69                                           @profile
    70                                           def get_dX(X,t,P):
    71                                             # initialize dX (fastest)
    72      9000          0.0      0.0      0.2    dX = 0*X # (s:2, i:4, k:5, h:6, c:5)
    73                                             # force of infection - modifies dX internally
    74      9000          7.5      0.0     54.2    inc = foi.get_apply_inc(dX,X,t,P) # (p:4, s:2, i:4, s':2, i':4)
    75                                             # HIV progression
    76      9000          0.0      0.0      0.3    dXi = X[:,:,:,1:5,0:3] * P['prog_h'] # all hiv & untreated
    77      9000          0.0      0.0      0.3    dX[:,:,:,1:5,0:3] -= dXi
    78      9000          0.0      0.0      0.3    dX[:,:,:,2:6,0:3] += dXi
    79                                             # CD4 recovery
    80      9000          0.0      0.0      0.2    dXi = X[:,:,:,3:6,3:5] * P['unprog_h'] # low CD4 & treated
    81      9000          0.0      0.0      0.3    dX[:,:,:,3:6,3:5] -= dXi
    82      9000          0.0      0.0      0.2    dX[:,:,:,2:5,3:5] += dXi
    83                                             # births & deaths (entry & exit)
    84      9000          1.0      0.0      7.3    birth, PXe_si, turn = params.solve_turnover(P,t)
    85      9000          0.1      0.0      0.6    dX[:,:,0,0,0] += X.sum() * birth * PXe_si
    86      9000          0.0      0.0      0.2    dX -= X * P['death']
    87      9000          0.0      0.0      0.2    dX -= X * P['death_hc']
    88                                             # turnover among activity groups
    89      9000          0.1      0.0      0.5    dXi = turn[:,:,:,_,_,_] * X[:,:,_,:,:,:]
    90      9000          0.1      0.0      0.4    dX -= dXi.sum(axis=2) # (s:2, i:4, k:5, h:6, c:5)
    91      9000          0.0      0.0      0.3    dX += dXi.sum(axis=1) # (s:2, i':4, k:5, h:6, c:5)
    92                                             # cascade: diagnosis
    93      9000          1.5      0.0     10.9    dXi = X[:,:,:,1:6,0] * P['dx_sit'](t) * P['Rdx_scen']
    94      9000          0.0      0.0      0.3    dX[:,:,:,1:6,0] -= dXi # undiag
    95      9000          0.0      0.0      0.2    dX[:,:,:,1:6,1] += dXi # diag
    96                                             # cascade: treatment
    97      9000          2.3      0.0     16.8    dXi = X[:,:,:,1:6,1] * P['tx_sit'](t) * P['Rtx_ht'](t) * P['Rtx_scen']
    98      9000          0.0      0.0      0.3    dX[:,:,:,1:6,1] -= dXi # diag
    99      9000          0.0      0.0      0.2    dX[:,:,:,1:6,3] += dXi # treat
   100                                             # cascade: viral suppression
   101      9000          0.0      0.0      0.2    dXi = X[:,:,:,1:6,3] * P['vx']
   102      9000          0.0      0.0      0.2    dX[:,:,:,1:6,3] -= dXi # treat
   103      9000          0.0      0.0      0.2    dX[:,:,:,1:6,4] += dXi # vls
   104                                             # cascade: treatment fail / discontinue
   105      9000          0.3      0.0      2.2    dXi = X[:,:,:,1:6,4] * P['unvx_t'](t) * P['Runvx_si'] * P['Rux_scen']
   106      9000          0.0      0.0      0.2    dX[:,:,:,1:6,4] -= dXi # vls
   107      9000          0.0      0.0      0.2    dX[:,:,:,1:6,2] += dXi # fail
   108                                             # cascade: viral re-suppression
   109      9000          0.3      0.0      2.0    dXi = X[:,:,:,1:6,2] * P['revx_t'](t)
   110      9000          0.0      0.0      0.2    dX[:,:,:,1:6,2] -= dXi # fail
   111      9000          0.0      0.0      0.2    dX[:,:,:,1:6,4] += dXi # vls
   112      9000          0.0      0.0      0.0    return {
   113      9000          0.0      0.0      0.0      'dX': dX,
   114      9000          0.0      0.0      0.0      'inc': inc,
   115                                             }

